import streamlit as st
from document_search import DocumentSearch
from pathlib import Path
import json
import time

st.set_page_config(
    page_title="–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º",
    page_icon="üîç",
    layout="wide"
)

def initialize_search_engine():
    if 'search_engine' not in st.session_state:
        try:
            st.session_state.search_engine = DocumentSearch()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {str(e)}")
            st.stop()

def display_system_info():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    with st.sidebar:
        st.header("–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        if hasattr(st.session_state.search_engine, 'components'):
            st.write("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
            components = st.session_state.search_engine.components
            
            formats = {
                'docx': ('Word (.docx)', 'üìÑ'),
                'xlsx': ('Excel (.xlsx)', 'üìä'),
                'pptx': ('PowerPoint (.pptx)', 'üìë'),
                'msg': ('Outlook (.msg)', 'üìß')
            }
            
            for fmt, (name, icon) in formats.items():
                if components.get(fmt):
                    st.success(f"{icon} {name}")
                else:
                    st.error(f"{icon} {name} (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)")
            
            if components.get('embeddings'):
                st.success(f"üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {st.session_state.search_engine.device}")
            else:
                st.error("üß† –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

def main():
    st.title("üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
    
    initialize_search_engine()
    display_system_info()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([2, 1])
    
    with col2:
        st.info(
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n"
            f"{st.session_state.search_engine.base_path}"
        )
        
        if st.button("üîÑ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", type="primary"):
            with st.spinner("–ò–¥—ë—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."):
                try:
                    start_time = time.time()
                    stats = st.session_state.search_engine.index_documents()
                    duration = time.time() - start_time
                    
                    if stats['indexed_files'] > 0:
                        st.success(
                            f"‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.1f} —Å–µ–∫!\n\n"
                            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                            f"- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats['processed_files']}\n"
                            f"- –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {stats['indexed_files']}\n"
                            f"- –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped_files']}"
                        )
                        if stats['errors']:
                            with st.expander("üö´ –û—à–∏–±–∫–∏ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"):
                                for error in stats['errors']:
                                    st.error(error)
                    else:
                        st.warning("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
                        
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {str(e)}")
    
    with col1:
        search_query = st.text_input(
            "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ü–æ—Ç–æ–∫",
            help="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"
        )
        
        col3, col4 = st.columns([1, 4])
        with col3:
            n_results = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                min_value=1,
                max_value=20,
                value=5
            )
        
        if st.button("üîé –ò—Å–∫–∞—Ç—å", type="primary"):
            if search_query:
                with st.spinner("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫..."):
                    results = st.session_state.search_engine.search(search_query, n_results)
                    
                    if results:
                        st.subheader(f"üìë –ù–∞–π–¥–µ–Ω–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
                        
                        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        archive_path = st.session_state.search_engine.create_results_archive(results)
                        
                        for i, result in enumerate(results, 1):
                            score_color = "green" if result['relevance_score'] > 0.7 else "orange"
                            with st.expander(
                                f"{i}. {result['file_name']} "
                                f"(–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: :{score_color}[{result['relevance_score']:.2f}])"
                            ):
                                st.text("üìç –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:")
                                st.code(result['file_path'])
                                st.text("üìù –§—Ä–∞–≥–º–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
                                st.markdown(result['snippet'])
                        
                        if archive_path:
                            with open(archive_path, 'rb') as f:
                                st.download_button(
                                    label="üì• –°–∫–∞—á–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                                    data=f,
                                    file_name=Path(archive_path).name,
                                    mime="application/zip",
                                    help="–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"
                                )
                    else:
                        st.warning("üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")

if __name__ == "__main__":
    main()